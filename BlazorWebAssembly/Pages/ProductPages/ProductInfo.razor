@page "/Product/{productId:long}"
<PageTitle>Просмотр продукта</PageTitle>

@attribute [Authorize(Roles = Roles.Administrator)]

@inject IProductService productService
@inject NavigationManager navManager

<ErrorModal @ref="modal"></ErrorModal>

@if (product is null)
{
    <LoadingSpinner></LoadingSpinner>
}

@if (product is not null)
{
    <Button Color="ButtonColor.Secondary"
            Type="ButtonType.Link"
            To="@($"changeProduct/{product.Id}")">
        <Icon Name="IconName.Pencil" Size="IconSize.x6"></Icon>
        Изменить
    </Button>

    <Button Color="ButtonColor.Danger"
            @onclick="DeleteProduct"
            Class="mx-2">
        Удалить
    </Button>

    <div class="divider"></div>

    <h3>Наименование: @product.Name</h3>

    <p class="fs-4">Тип продукта: @product.Type?.Name</p>

    <p class="fs-3">Стоимость: @product.Cost</p>

    <h4>Описание</h4>
    <p class="fs-6 text-break text-wrap">@product.Description</p>

    <div class="divider"></div>

    <h3>
        Изображения
        <Button Color="ButtonColor.Success"
                Type="ButtonType.Link"
                To="@($"CreateProductImage/{product.Id}")">
            <Icon Name="IconName.PlusLg" Size="IconSize.x5"></Icon>
            Добавить изображение
        </Button>
    </h3>


    <div class="row">
        @foreach (var image in product.Images)
        {
            <div class="col-4">
                <img class="img-fluid" src="@image.GetImage()" />
            </div>

        }
    </div>



    <div class="divider"></div>

    <Button Color="ButtonColor.Secondary"
            Type="ButtonType.Link"
            To="@($"ChangePropertyValues/{product.Id}")">
        <Icon Name="IconName.Pencil" Size="IconSize.x5"></Icon>
        Изменить характеристики
    </Button>

    <table class="w-auto table table-striped table-bordered mt-3">
        <thead>
            <tr>
                <th>Характеристика</th>
                <th>Значение</th>
            </tr>
        </thead>
        <tbody>
            @foreach (PropertyValue propertyValue in product.PropertyValues)
            {
                <tr>
                    <td>@propertyValue.TypeProperty.Name</td>
                    <td>@propertyValue.Value</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    [Parameter]
    public long ProductId { get; set; }

    private Product? product = null;

    private ErrorModal modal = new();

    protected override async Task OnInitializedAsync()
    {
        await GetProduct();
    }

    async Task GetProduct()
    {
        var result = await productService.GetProductById(ProductId);

        switch (result)
        {
            case SuccessResult<Product> successResult:
                product = successResult.Data;
                break;

            case ErrorResult<Product> errorResult:
                await modal.ShowModal(errorResult);
                break;
        }
    }

    async Task DeleteProduct()
    {
        var result = await productService.DeleteProductById(product!.Id);

        switch (result)
        {
            case SuccessResult<Product> successResult:
                product = successResult.Data;
                break;

            case ErrorResult<Product> errorResult:
                await modal.ShowModal(errorResult);
                break;
        }
    }
}
