@page "/products"
<PageTitle>Products</PageTitle>


@inject IProductService productService
@inject NavigationManager navManager

<h3>Products table</h3>

@if (_AllProducts is not null)
{
    <table>
        <thead>
            <tr>
                <th class="px-2">Id</th>
                <th class="px-2">Name</th>
                <th class="px-2">Description</th>
                <th class="px-2">Cost</th>
                <th class="px-2">TypeId</th>
                <th class="px-2"></th>
                <th class="px-2"></th>
            </tr>
        </thead>
        <tbody>
            @foreach (Product product in _AllProducts)
            {
                <tr>
                    <td class="px-2">@product.Id</td>
                    <td class="px-2">@product.Name</td>
                    <td class="px-2">@product.Description</td>
                    <td class="px-2">@product.Cost</td>
                    <td class="px-2">@product.TypeId</td>
                    <td class="px-2">
                        <Button Type="ButtonType.Link" Color="ButtonColor.Secondary" To="@($"changeProduct/{product.Id}")">
                            Изменить
                        </Button>
                    </td>
                    <td class="px-2">
                        <Button Color="ButtonColor.Danger" @onclick="() => DeleteProduct(product.Id)">
                            Удалить
                        </Button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <h3>@errorMessageAllProducts</h3>
}


<h3 class="mt-3">Search product</h3>
<NumberInput @bind-Value="@_productId" TValue="long?" Placeholder="Id продукта" Class="mt-3"/>

<Button Color="ButtonColor.Secondary" @onclick="GetProductById" Class="mt-3">
    Поиск продукта
</Button>

@if (_product is not null)
{
    <p class="mt-3">Id: @_product.Id</p>
    <p>Name: @_product.Name</p>
    <p>Description: @_product.Description</p>
    <p>Cost: @_product.Cost</p>
    <p>TypeId: @_product.TypeId</p>
}
else
{
    <p>@errorMessageProduct</p>
}


@code {
    private List<Product>? _AllProducts = null;

    private string? errorMessageAllProducts = null;

    private long? _productId = null;

    private Product? _product = null;

    private string? errorMessageProduct = null;

    protected override async Task OnInitializedAsync()
    {
        var result = await productService.GetAllProducts();

        if (result is SuccessResult<List<Product>> successResult)
        {
            _AllProducts = successResult.Data;
            errorMessageAllProducts = null;
        }

        else
        {
            if (result is ErrorResult<List<Product>> errorResult)
                errorMessageAllProducts = errorResult.Message;
        }

    }

    private async Task GetProductById()
    {
        if (_productId is null)
        {
            _product = null;
            return;
        }


        var result = await productService.GetProductById((long)_productId);

        switch (result)
        {
            case SuccessResult<Product> successResult:
                _product = result.Data;
                errorMessageProduct = null;
                break;

            case NotFoundErrorResult<Product> notFoundErrorResult:
                _product = null;
                errorMessageProduct = notFoundErrorResult.Message;
                break;

            case ErrorResult<Product> errorResult:
                _product = null;
                errorMessageProduct = errorResult.Message;
                break;
        }
    }

    private async Task DeleteProduct(long productId)
    {
        var result = await productService.DeleteProductById(productId);

        
    }
}
