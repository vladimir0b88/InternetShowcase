@page "/changeProduct/{productId:long}"
<PageTitle>Изменение продукта</PageTitle>

@attribute [Authorize(Roles = Roles.Administrator)]

@inject IProductService productService
@inject NavigationManager navManager

<ErrorModal @ref="modal"></ErrorModal>

<h3>Изменение продукта</h3>

@if (updateDto is not null)
{
    <EditForm Model="updateDto" OnValidSubmit="UpdateProduct">
        <FluentValidationValidator />
        <ValidationSummary />


        <label class="col-form-label">Тип товара</label>
        <div class="col-md-2">
            <input class="form-control" placeholder="@product.Type!.Name" disabled>
        </div>

        <div class="col-auto">
            <label class="form-label">
                Наименование продукта
                <InputText @bind-Value="@updateDto.Name" class="form-control"></InputText>
            </label>
        </div>

        <div class="col-auto">
            <label class="form-label">
                Описание
                <InputTextArea @bind-Value="@updateDto.Description" class="form-control"></InputTextArea>
            </label>
        </div>


        <div class="col-auto">
            <label class="form-label">
                Стоимость
                <NumberInput @bind-Value="@updateDto.Cost" Class="form-control"></NumberInput>
            </label>
        </div>


        <div class="col-auto mt-2">
            <Button Color="ButtonColor.Success" @onclick="UpdateProduct">Изменить</Button>
        </div>


    </EditForm>
}

@code {
    [Parameter]
    public long ProductId { get; set; }

    private Product product = new();

    private ProductUpdateDto? updateDto = null;

    private PropertyValueUpdateDtoList propertyValueUpdateDto = new();

    private ErrorModal modal = new();

    private List<PropertyValue> propertyValues = new();

    protected override async Task OnInitializedAsync()
    {
        await GetProductUpdateDto();
    }

    private async Task GetProductUpdateDto()
    {
        var result = await productService.GetProductById(ProductId);

        if (result is ErrorResult<Product> errorResult)
        {
            await modal.ShowModal(errorResult);
            return;
        }

        product = result.Data;

        updateDto = new ProductUpdateDto()
            {
                Id = product.Id,
                Name = product.Name,
                Description = product.Description,
                Cost = product.Cost,
                TypeId = product.TypeId,
            };
    }

    private async Task UpdateProduct()
    {
        var result = await productService.UpdateProduct(updateDto!);

        if (result is ErrorResult errorResult)
        {
            await modal.ShowModal(errorResult);
            return;
        }

        navManager.NavigateTo($"/Product/{ProductId}");
    }
}
