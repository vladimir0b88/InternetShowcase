@page "/CreateProduct/{typeId:long}"
<PageTitle>Создание продукта</PageTitle>

@attribute [Authorize(Roles = "Administrator")]

@inject IProductService productService
@inject IProductTypeService productTypeService
@inject NavigationManager navManager

<ErrorModal @ref="modal"></ErrorModal>

<h3>Создание продукта</h3>

@if (_productType is not null)
{
    <EditForm Model="_createDto" OnValidSubmit="Submit">

        <FluentValidationValidator />
        <ValidationSummary />

        <div class="form-group">

            <label class="col-form-label">Тип товара</label>
            <div class="col-md-2">
                <input class="form-control" placeholder="@_productType.Name" disabled>
            </div>

            <label class="col-form-label">Название</label>
            <div class="col-md-2">
                <InputText @bind-Value="@_createDto.Name" class="form-control"></InputText>
            </div>

            <label class="col-form-label">Описание</label>
            <div class="col-md-2">
                <InputTextArea @bind-Value="@_createDto.Description" class="form-control"></InputTextArea>
            </div>

            <label class="col-form-label">Стоимость</label>
            <div class="col-md-2">
                <InputNumber @bind-Value="@_createDto.Cost" class="form-control"></InputNumber>
            </div>

            <div class="col-md-2 mt-2">
                <Button Type="ButtonType.Submit" Color="ButtonColor.Success">Создать</Button>
            </div>
        </div>
    </EditForm>
}



@code {
    [Parameter]
    public long TypeId { get; set; }

    private ProductCreateDto _createDto = new ProductCreateDto();
    private ProductType? _productType = null;

    private ErrorModal modal = new();

    protected override async Task OnInitializedAsync()
    {
        await GetProductType();
    }

    async Task GetProductType()
    {
        var result = await productTypeService.GetProductTypeById(TypeId);

        switch (result)
        {
            case SuccessResult<ProductType> successResult:
                _productType = successResult.Data;
                _createDto.TypeId = _productType.Id;
                break;

            case ErrorResult<ProductType> errorResult:
                await modal.ShowModal(errorResult);
                break;
        }
    }


    private async Task Submit()
    {
        var result = await productService.AddProduct(_createDto!);

        if (result is ErrorResult errorResult)
        {
            await modal.ShowModal(errorResult);
            return;
        }

        navManager.NavigateTo($"ProductType/{_productType!.Id}");
    }
}
