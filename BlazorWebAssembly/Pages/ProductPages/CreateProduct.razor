@page "/createProduct"
<PageTitle>Создание продукта</PageTitle>

@inject IProductService productService
@inject NavigationManager navManager

<h3>Создание продукта</h3>

<div class="form-group">

    <label class="col-form-label">Наименование продукта</label>
    <div class="col-md-2">
        <InputText @bind-Value="@createDto.Name" class="form-control"></InputText>
    </div>


    <label class="col-form-label">Описание</label>
    <div class="col-md-2">
        <InputTextArea @bind-Value="@createDto.Description" class="form-control"></InputTextArea>
    </div>


    <label class="col-form-label">Стоимость</label>
    <div class="col-md-2">
        <NumberInput @bind-Value="@createDto.Cost"></NumberInput>
    </div>


    <label class="col-form-label">Тип товара</label>
    <div class="col-md-2">
        <NumberInput @bind-Value="@createDto.TypeId"></NumberInput>
    </div>
    
    <div class="col-md-2 mt-2">
        <Button Color="ButtonColor.Success" @onclick="AddProduct">Создать</Button>
    </div>
    
</div>

@if (errorMessage is not null)
{
    <div class="col-auto">
        <h3>@errorMessage</h3>
    </div>
}


@code {
    private ProductCreateDto createDto = new ProductCreateDto();

    private string? errorMessage = null;

    protected override void OnInitialized()
    {
        createDto = new ProductCreateDto()
            {
                Name = string.Empty,
                Description = string.Empty,
            };
    }

    private async Task AddProduct()
    {
        var result = await productService.AddProduct(createDto!);

        if (result is ErrorResult errorResult)
        {
            errorMessage = errorResult.Message;
        }
        else
        {
            errorMessage = null;
            navManager.NavigateTo("products");
        }
    }
}
