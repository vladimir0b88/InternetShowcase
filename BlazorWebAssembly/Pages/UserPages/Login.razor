@page "/Login"
<PageTitle>Войти</PageTitle>

@attribute [AllowAnonymous]

@inject IUserService userService
@inject NavigationManager navManager
@inject AuthenticationStateProvider stateProvider

<h3>Войти в личный кабинет</h3>

<ErrorModal @ref="modal"></ErrorModal>

<EditForm Model="loginDto" OnValidSubmit="Submit" autocomplete="off">

    <div class="form-group">
        <label class="col-form-label">Эл. почта</label>
        <div class="col-md-6">
            <InputText @bind-Value="@loginDto.Email" class="form-control"></InputText>
        </div>

        <label class="col-form-label">Пароль</label>
        <div class="col-md-6">
            <InputText @bind-Value="@loginDto.Password" type="password" class="form-control"></InputText>
        </div>

        <div class="col-md-6 mt-2">
            <Button Type="ButtonType.Submit" Color="ButtonColor.Success">Войти</Button>
        </div>
    </div>

</EditForm>

@code {
    private UserLoginDto loginDto = new UserLoginDto();

    private ErrorModal modal = new();

    private async Task Submit()
    {
        var result = await userService.Login(loginDto);

        if (result is ErrorResult<string> errorResult)
        {
            await modal.ShowModal(errorResult);
            return;
        }


        var customStateProvider = (CustomAuthStateProvider)stateProvider;

        await customStateProvider.UpdateAuthState(result.Data);

        navManager.NavigateTo("/");
    }
}
