@page "/Login"
<PageTitle>Войти</PageTitle>

@inject IUserService userService
@inject NavigationManager navManager
@inject AuthenticationStateProvider authStateProvider

<h3>Войти в личный кабинет</h3>

@if(_errorMessage is not null)
{
    <h3>@_errorMessage</h3>
}

<EditForm Model="_loginDto" OnValidSubmit="Submit" autocomplete="off">

    <div class="form-group">
        <label class="col-form-label">Эл. почта</label>
        <div class="col-md-2">
            <InputText @bind-Value="@_loginDto.Email" class="form-control"></InputText>
        </div>

        <label class="col-form-label">Пароль</label>
        <div class="col-md-2">
            <InputText @bind-Value="@_loginDto.Password" type="password" class="form-control"></InputText>
        </div>

        <div class="col-md-2 mt-2">
            <Button Type="ButtonType.Submit" Color="ButtonColor.Success">Войти</Button>
        </div>
    </div>

</EditForm>

@code {
    private UserLoginDto _loginDto = new UserLoginDto();

    private string? _errorMessage = null;

    private async Task Submit()
    {
        var result = await userService.Login(_loginDto);

        if (result is ErrorResult<string> errorResult)
            _errorMessage = errorResult.Message;
        else
        {
            _errorMessage = null;

            var stateProvider = (CustomAuthStateProvider)authStateProvider;

            stateProvider.UpdateAuthenticationState(result.Data);

            navManager.NavigateTo("/");
        }
    }
}
