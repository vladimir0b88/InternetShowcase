@page "/Registration"
<PageTitle>Регистрация</PageTitle>

@attribute [AllowAnonymous]

@inject IUserService userService
@inject NavigationManager navManager

<ErrorModal @ref="modal"></ErrorModal>

<h3>Регистрация</h3>

<EditForm Model="registerDto" OnValidSubmit="Submit" autocomplete="off">
    <FluentValidationValidator />
    <ValidationSummary />

    <div class="form-floating col-md-3 mb-3">
        <InputText @bind-Value="@registerDto.UserName" id="registerDtoUserName" class="form-control"></InputText>
        <label for="registerDtoUserName">Имя пользователя</label>
    </div>

    <div class="form-floating col-md-3 mb-3">
        <InputText @bind-Value="@registerDto.Email" id="registerDtoEmail" class="form-control"></InputText>
        <label for="registerDtoEmail">Эл. почта</label>
    </div>

    <div class="form-floating col-md-3 mb-3">
        <InputText @bind-Value="@registerDto.Password" id="registerDtoPass" type="password" class="form-control"></InputText>
        <label for="registerDtoPass">Пароль</label>
    </div>

    <div class="col-md-2 mt-2">
        <Button Type="ButtonType.Submit" Color="ButtonColor.Success">Регистрация</Button>
    </div>

</EditForm>


@code {
    private UserRegisterDto registerDto = new UserRegisterDto();

    private ErrorModal modal = new();

    private async Task Submit()
    {
        var result = await userService.Register(registerDto);

        if (result is ErrorResult errorResult)
        {
            await modal.ShowModal(errorResult);
            return;
        }

        navManager.NavigateTo("/");
    }
}
