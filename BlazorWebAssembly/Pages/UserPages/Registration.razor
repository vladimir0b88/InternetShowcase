@page "/Registration"
<PageTitle>Регистрация</PageTitle>

@inject IUserService userService
@inject NavigationManager navManager

<h3>Регистрация</h3>

@if(_errorMessage is not null)
{
    <h3>@_errorMessage</h3>
}

<EditForm Model="_registerDto" OnValidSubmit="Submit" autocomplete="off">
    <FluentValidationValidator/>
    <ValidationSummary/>

    <div class="form-group">
        <label class="col-form-label">Имя пользователя</label>
        <div class="col-md-2">
            <InputText @bind-Value="@_registerDto.UserName" class="form-control"></InputText>
        </div>

        <label class="col-form-label">Эл.почта</label>
        <div class="col-md-2">
            <InputText @bind-Value="@_registerDto.Email" class="form-control"></InputText>
        </div>

        <label class="col-form-label">Пароль</label>
        <div class="col-md-2">
            <InputText @bind-Value="@_registerDto.Password" type="password" class="form-control"></InputText>
        </div>


        <div class="col-md-2 mt-2">
            <Button Type="ButtonType.Submit" Color="ButtonColor.Success">Регистрация</Button>
        </div>
    </div>

</EditForm>


@code {
    private UserRegisterDto _registerDto = new UserRegisterDto();

    private string? _errorMessage = null;

    private async Task Submit()
    {
        var result = await userService.Register(_registerDto);

        if(result is ErrorResult errorResult)
        {
            _errorMessage = errorResult.Message;
        }
        else
        {
            _errorMessage = null;
            navManager.NavigateTo("/");
        }
    }
}
