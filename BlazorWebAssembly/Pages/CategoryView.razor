@page "/Category/{typeId:long}"
<PageTitle>Просмотр категории</PageTitle>

@inject IProductService productService
@inject IProductTypeService productTypeService
@inject IPropertyValueService propertyValueService
@inject NavigationManager navManager

<ErrorModal @ref="modal"></ErrorModal>

<div class="container-lg">
    @if (productType is null)
    {
        <div class="mt-5">
            <LoadingSpinner></LoadingSpinner>
        </div>
    }
    else
    {
        <div class="row g-2">
            <div class="col-12 mt-0">
                <nav aria-label="breadcrumb" class="mx-2">
                    <ol class="breadcrumb mb-0">
                        <li class="breadcrumb-item text-decoration-underline">
                            <a href="/" class="text-reset">Каталог</a>
                        </li>
                        <li class="breadcrumb-item active" aria-current="page">@productType.Name</li>
                    </ol>
                </nav>

                <h2 class="p-2 mt-2">@productType.Name</h2>
            </div>
        </div>


        <div class="row g-2">

            <div class="col-12 col-sm-12 col-md-3 col-lg-3 col-xl-2">

                <h3 class="p-2 border-bottom border-success border-2" style="min-height: 56px;">Свойства</h3>

                <div class="">
                    <Accordion AlwaysOpen @ref="accordion" Class="m-0 p-0 border border-2 border-secondary rounded">
                         @foreach (var property in uniquePropertyValues)
                        {
                            <AccordionItem Title="@(property.TypeProperty.Name)" Class="p-0 m-0 border-0">
                                <Content>
                                    <div class="form-check">
                                        @foreach (var propertyValue in property.Values)
                                        {
                                            <label class="form-label">
                                                <input type="checkbox" value="@propertyValue" class="form-check-input"
                                                       @onchange="args => CheckBoxToggle(args, property.TypeProperty.Id, propertyValue)"
                                                       checked="@(filter.PropertyFilters?.Any(pf => pf.PropertyId==property.TypeProperty.Id
                                                                                                && pf.Values.Contains(propertyValue)))" />
                                                @propertyValue
                                            </label>

                                            <br />
                                        }
                                    </div>
                                </Content>
                            </AccordionItem>
                        }

                        <AccordionItem Title="Стоимость" Class="p-0 m-0 border-0">
                            <Content>
                                <label class="form-label">
                                    Минимальная
                                    <NumberInput @bind-Value="filter.MinCost" Class="form-control" EnableMinMax
                                                  Min="0"
                                                  Max="filter.MaxCost<=100 ? 0:filter.MaxCost-100" />
                                 </label>

                                 <label class="form-label">
                                     Максимальная
                                     <NumberInput @bind-Value="filter.MaxCost" Class="form-control" EnableMinMax
                                                  Min="filter.MinCost + 100" />
                                 </label>
                             </Content>
                         </AccordionItem>
                     </Accordion>
                 </div>


                 <div class="mt-2 d-flex">
                     <Button Color="ButtonColor.Success"
                             Class="flex-fill me-2"
                             @onclick="()=>GetProducts(1,SortingMethods.ByCostDesk)">
                         Поиск
                     </Button>

                     <Button Color="ButtonColor.Secondary"
                             Class="flex-fill"
                             @onclick="ResetFilter">
                         Сброс
                     </Button>
                 </div>

             </div>

             <div class="col-12 col-sm-12 col-md-9 col-lg-9 col-xl-10">

                 <div class="d-flex flex-row
                            justify-content-between
                            border-bottom border-success border-2
                            mb-2 py-2">

                     <div class="d-flex flex-row flex-fill">
                         <div class="input-group">
                             <InputText @bind-Value="@nameFilter"
                                        id="search-btn"
                                        placeholder="Наименование.."
                                        class="form-control search-input"></InputText>


                             <Button Color="ButtonColor.Success" Outline Class="p-0 sort-btn"
                                     @onclick="()=>GetProducts(1,filter.SortingMethod)">
                                 <Icon Name="IconName.Search" Size="IconSize.x4" Class="px-2"></Icon>
                             </Button>
                         </div>

                     </div>

                     <div class="d-flex flex-row justify-content-between">

                         <div class="px-2">
                             <Button Color="ButtonColor.Success" Outline Class="p-0 sort-btn"
                                     Active="filteringResult?.SortingMethod is SortingMethods.ByNameAsk"
                                     @onclick="()=>GetProducts(1, SortingMethods.ByNameAsk)">
                                 <Icon Name="IconName.SortAlphaDown" Size="IconSize.x4" Class="px-2"></Icon>
                             </Button>

                             <Button Color="ButtonColor.Success" Outline Class="p-0 sort-btn"
                                     Active="filteringResult?.SortingMethod is SortingMethods.ByNameDesk"
                                     @onclick="()=>GetProducts(1, SortingMethods.ByNameDesk)">
                                 <Icon Name="IconName.SortAlphaDownAlt" Size="IconSize.x4" Class="px-2"></Icon>
                             </Button>

                             <Button Color="ButtonColor.Success" Outline Class="p-0 sort-btn"
                                     Active="filteringResult?.SortingMethod is SortingMethods.ByCostAsk"
                                     @onclick="()=>GetProducts(1, SortingMethods.ByCostAsk)">
                                 <Icon Name="IconName.SortNumericDown" Size="IconSize.x4" Class="px-2"></Icon>
                             </Button>

                             <Button Color="ButtonColor.Success" Outline Class="p-0 sort-btn"
                                     Active="filteringResult?.SortingMethod is SortingMethods.ByCostDesk"
                                     @onclick="()=>GetProducts(1, SortingMethods.ByCostDesk)">
                                 <Icon Name="IconName.SortNumericDownAlt" Size="IconSize.x4" Class="px-2"></Icon>
                             </Button>
                         </div>

                         @if (filteringResult is not null &&
                       filteringResult.TotalPages > 1)
                        {
                            <Pagination Class="m-0 d-none d-xl-inline-flex"
                                        ActivePageNumber="(int)filteringResult.CurrentPage"
                                        TotalPages="(int)filteringResult.TotalPages"
                                        FirstLinkIcon="IconName.ChevronDoubleLeft"
                                        PreviousLinkIcon="IconName.ChevronLeft"
                                        NextLinkIcon="IconName.ChevronRight"
                                        LastLinkIcon="IconName.ChevronDoubleRight"
                                        PageChanged="OnPageChangedAsync">
                            </Pagination>
                        }
                    </div>
                </div>



                @if (filteringResult is null)
                {
                    <div class="mt-5">
                        <LoadingSpinner></LoadingSpinner>
                    </div>
                }
                else
                {


                    <div class="container-fluid p-0 mb-2">
                        @if (filteringResult is null)
                        {
                            <div class="mt-5">
                                <LoadingSpinner></LoadingSpinner>
                            </div>
                        }

                        @if (products is not null)
                        {
                            <div class="row g-2">
                                @foreach (Product product in products)
                                {
                                    <ProductCardMini Product="product" />
                                }
                            </div>
                        }
                    </div>
                    @if (products is not null && filteringResult is not null &&
                   filteringResult.TotalPages > 1)
                    {
                        <Pagination Class="mb-2 pt-1 d-xl-none"
                                    ActivePageNumber="(int)filteringResult.CurrentPage"
                                    TotalPages="(int)filteringResult.TotalPages"
                                    Alignment="Alignment.Center"
                                    FirstLinkIcon="IconName.ChevronDoubleLeft"
                                    PreviousLinkIcon="IconName.ChevronLeft"
                                    NextLinkIcon="IconName.ChevronRight"
                                    LastLinkIcon="IconName.ChevronDoubleRight"
                                    PageChanged="OnPageChangedAsync">
                        </Pagination>
                    }

                }


            </div>

        </div>
    }
</div>

@code {
    [Parameter]
    public long TypeId { get; set; }
    private ProductType? productType = null;

    private List<Product>? products = null;

    private FilteringResult<Product>? filteringResult = null;

    private ErrorModal modal = new();

    private Accordion accordion = new();

    private string? nameFilter = null;

    private List<UniquePropertyValues> uniquePropertyValues = new();

    private ProductsFilter filter = new()
        {
            Name = null,
            ItemsOnPage = 12,
            PageNumber = 1,
            SortingMethod = ProductsFilter.SortingMethods.ByCostDesk,
            MinCost = null,
            MaxCost = null,
        };


    protected override async Task OnInitializedAsync()
    {
        await GetProductType();

        filter.ProductTypeId = TypeId;

        await GetUniquePropertyValues();

        await GetProducts(1);
    }

    async Task GetProductType()
    {
        var result = await productTypeService.GetProductTypeById(TypeId);

        switch (result)
        {
            case SuccessResult<ProductType> successResult:
                productType = successResult.Data;
                break;

            case ErrorResult<ProductType> errorResult:
                await modal.ShowModal(errorResult);
                break;
        }
    }

    async Task GetUniquePropertyValues()
    {
        var result = await propertyValueService.GetUniquePropertyValues(productType!.Id);

        switch (result)
        {
            case SuccessResult<List<UniquePropertyValues>> successResult:
                uniquePropertyValues = successResult.Data;
                break;
            case ErrorResult<List<UniquePropertyValues>> errorResult:
                await modal.ShowModal(errorResult);
                break;
        }
    }

    async Task OnPageChangedAsync(int newPageNumber)
    {
        await GetProducts(newPageNumber, filter.SortingMethod);
    }

    async Task GetProducts(int pageNumber, SortingMethods sortingMethod = SortingMethods.ByCostDesk)
    {
        filter.PageNumber = pageNumber;
        filter.SortingMethod = sortingMethod;
        filter.Name = nameFilter?.ToLower();

        products = null;

        var result = await productService.GetProductsByFilter(filter);

        switch (result)
        {
            case SuccessResult<FilteringResult<Product>> successResult:
                filteringResult = successResult.Data;
                products = successResult.Data.Results;
                break;

            case ErrorResult<FilteringResult<Product>> errorResult:
                filteringResult = null;
                await modal.ShowModal(errorResult);
                break;
        }
    }


    void CheckBoxToggle(ChangeEventArgs args, long propertyId, string value)
    {
        bool isSelected = (bool)args.Value!;

        if (isSelected)
            filter.AddPropertyFilterValue(propertyId, value);
        else
            filter.RemovePropertyFilterValue(propertyId, value);
    }

    void ResetFilter()
    {
        filter.PropertyFilters = null;
        filter.Name = null;
        filter.MinCost = null;
        filter.MaxCost = null;
        nameFilter = null;

    }
}
