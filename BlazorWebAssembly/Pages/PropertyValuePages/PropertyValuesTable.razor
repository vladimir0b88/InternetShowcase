@page "/PropertyValuesTable"
<PageTitle>Таблица значений свойств</PageTitle>

@attribute [Authorize(Roles = Roles.Administrator)]

@inject IPropertyValueService propertyValueService

<ErrorModal @ref="modal"></ErrorModal>

<h3>Значения свойств</h3>

@if (propertyValues is null)
{
    <LoadingSpinner></LoadingSpinner>
}
else
{
    <QuickGrid Items="propertyValues" Class="w-auto table table-striped table-bordered">
        <PropertyColumn Property="@(p => p.Id)"></PropertyColumn>

        <PropertyColumn Property="@(p => p.ProductId)" Title="id продукта" Sortable="true" IsDefaultSortColumn></PropertyColumn>

         <PropertyColumn Property="@(pv => pv.PropertyId)" Title="id свойства"></PropertyColumn>

         <PropertyColumn Property="@(p => p.Value)" Title="Значение свойства"></PropertyColumn>
     </QuickGrid>
}

@code {
    private IQueryable<PropertyValue>? propertyValues = null;

    private ErrorModal modal = new();

    protected override async Task OnInitializedAsync()
    {
        await GetPropertyValues();
    }


    async Task GetPropertyValues()
    {
        var result = await propertyValueService.GetAllPropertyValues();

        switch (result)
        {
            case SuccessResult<List<PropertyValue>> successResult:
                propertyValues = successResult.Data.AsQueryable();
                break;

            case ErrorResult<List<PropertyValue>> errorResult:
                await modal.ShowModal(errorResult);
                break;
        }
    }
}