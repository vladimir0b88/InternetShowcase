@page "/"
<PageTitle>Каталог</PageTitle>

@attribute [AllowAnonymous]

@inject IProductTypeService productTypeService
@inject IProductService productService
@inject ITypePropertyService typePropertyService
@inject NavigationManager navManager

<div class="container">
    @if (productTypes is null)
    {
        <LoadingSpinner></LoadingSpinner>
    }
    else
    {
        <div class="row g-2">
            <div class="col-12 col-sm-4 col-md-3 col-lg-3">
                <h3 class="p-3 border-bottom border-success border-2">Категории</h3>
                <ul class="list-group border border-2 border-secondary">

                    @foreach (ProductType productType in productTypes)
                    {
                        <li class="list-group-item">
                            <span class="fs-5 align-middle">@productType.Name</span>
                        </li>
                    }

                </ul>
            </div>

            <div class="col-12 col-sm-8 col-md-9 col-lg-9">
                <h3 class="p-3 border-bottom border-success border-2">Все товары</h3>

                <div class="container-fluid">
                    @if (products is null)
                    {
                        <h3>Товары отсутствуют...</h3>
                    }
                    else
                    {
                        @foreach (Product product in products)
                        {
                           <ProductCardMini Product="product"/>
                        }
                    }
                </div>
            </div>

        </div>
    }
</div>

@code {
    private List<ProductType>? productTypes = null;

    private List<Product>? products = null;

    protected override async Task OnInitializedAsync()
    {
        await GetProductTypes();

        await GetProducts();
    }

    async Task GetProductTypes()
    {
        var result = await productTypeService.GetAllProductTypes();

        switch (result)
        {
            case SuccessResult<List<ProductType>> successResult:
                productTypes = successResult.Data;
                break;

            case ErrorResult<List<ProductType>> errorResult:
                productTypes = null;
                break;
        }
    }

    async Task GetProducts()
    {
        var result = await productService.GetAllProducts();

        switch (result)
        {
            case SuccessResult<List<Product>> successResult:
                products = successResult.Data;
                break;

            case ErrorResult<List<Product>> errorResult:
                products = null;
                break;
        }
    }
}
