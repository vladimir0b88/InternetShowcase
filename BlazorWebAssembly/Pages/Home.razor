@page "/"
<PageTitle>Каталог</PageTitle>

@attribute [AllowAnonymous]

@inject IProductTypeService productTypeService
@inject IProductService productService
@inject ITypePropertyService typePropertyService
@inject NavigationManager navManager

<div class="container">
    @if (productTypes is null)
    {
        <LoadingSpinner></LoadingSpinner>
    }
    else
    {
        <div class="row g-2">
            <div class="col-12 col-sm-12 col-md-3 col-lg-2 col-xl-2">
                <h3 class="p-3 border-bottom border-success border-2">Категории</h3>
                <ul class="list-group border border-2 border-secondary">

                    @foreach (ProductType productType in productTypes)
                    {
                        <li class="list-group-item">
                            <span class="fs-5 align-middle">@productType.Name</span>
                        </li>
                    }

                </ul>
            </div>

            <div class="col-12 col-sm-12 col-md-9 col-lg-10 col-xl-10">
                <h3 class="p-3 border-bottom border-success border-2">Все товары</h3>

                @if(filteringResult is null)
                {
                    <LoadingSpinner></LoadingSpinner>
                }
                else
                {


                    <div class="container-fluid p-0 mb-2">
                        @if (products is null || products.Count == 0)
                        {
                            <LoadingSpinner></LoadingSpinner>
                        }
                        else
                        {
                            <div class="row g-2">
                                @foreach (Product product in products)
                                {
                                    <ProductCardMini Product="product" />
                                }
                            </div>
                        }
                    </div>
                }

                <Pagination Class="mb-3"
                            ActivePageNumber="(int)filteringResult.CurrentPage"
                            TotalPages="(int)filteringResult.TotalPages"
                            Alignment="Alignment.Center"
                            FirstLinkIcon="IconName.ChevronDoubleLeft"
                            PreviousLinkIcon="IconName.ChevronLeft"
                            NextLinkIcon="IconName.ChevronRight"
                            LastLinkIcon="IconName.ChevronDoubleRight"
                            PageChanged="OnPageChangedAsync">
                </Pagination>
            </div>

        </div>
    }
</div>

@code {
    private List<ProductType>? productTypes = null;

    private FilteringResult<Product>? filteringResult = null;

    private List<Product>? products = null;

    private ProductsFilter filter = new()
        {
            ItemsOnPage = 12,
            PageNumber = 1,
            SortingMethod = ProductsFilter.SortingMethods.ByCostDesk,
            MinCost = null,
            MaxCost = null,
        };

    protected override async Task OnInitializedAsync()
    {
        await GetProductTypes();

        await GetProducts(1);
    }

    async Task OnPageChangedAsync(int newPageNumber)
    {
        await GetProducts(newPageNumber);
    }

    async Task GetProductTypes()
    {
        var result = await productTypeService.GetAllProductTypes();

        switch (result)
        {
            case SuccessResult<List<ProductType>> successResult:
                productTypes = successResult.Data;
                break;

            case ErrorResult<List<ProductType>> errorResult:
                productTypes = null;
                break;
        }
    }

    async Task GetProducts(int pageNumber)
    {
        filter.PageNumber = pageNumber;

        products = null;

        var result = await productService.GetProductsByFilter(filter);

        switch (result)
        {
            case SuccessResult<FilteringResult<Product>> successResult:
                filteringResult = successResult.Data;
                products = successResult.Data.Results;
                break;

            case ErrorResult<FilteringResult<Product>> errorResult:
                filteringResult = null;
                products = null;
                break;
        }
    }
}
