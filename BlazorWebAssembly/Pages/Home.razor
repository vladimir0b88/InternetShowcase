@page "/"
<PageTitle>Каталог</PageTitle>

@attribute [AllowAnonymous]

@inject IProductTypeService productTypeService
@inject IProductService productService
@inject ITypePropertyService typePropertyService
@inject NavigationManager navManager

<div class="container-lg">
    @if (productTypes is null)
    {
        <div class="mt-5">
            <LoadingSpinner></LoadingSpinner>
        </div>
    }
    else
    {
        <div class="row g-2">


            <div class="col-12 col-sm-12 col-md-3 col-lg-3 col-xl-2">

                <h3 class="p-3 border-bottom border-success border-2">Категории</h3>
                <ul class="list-group border border-2 border-secondary">

                    @foreach (ProductType productType in productTypes)
                    {
                        <li class="list-group-item">
                            <span class="fs-5 align-middle">@productType.Name</span>
                        </li>
                    }

                </ul>

            </div>


            <div class="col-12 col-sm-12 col-md-9 col-lg-9 col-xl-10">

                <div class="d-flex flex-row
                            justify-content-between
                            border-bottom border-success border-2
                            mb-2">

                    <h3 class="p-3 m-0">Все товары</h3>

                    <div class="d-flex flex-row justify-content-between">

                        <div class="pt-3">
                            <Dropdown Direction="DropdownDirection.DropdownCentered">
                                <DropdownToggleButton Class="btn btn-outline-success sort-toggle-btn sort-btn p-0">
                                    <Icon Name="IconName.Search" Size="IconSize.x4" Class="px-2"></Icon>
                                </DropdownToggleButton>
                                <DropdownMenu>
                                    <div class="d-flex flex-row">
                                        <InputText @bind-Value="@nameFilter" class="border-0 search-input"></InputText>
                                        <Button @onclick="()=>GetProducts(1,filter.SortingMethod)" Class="">
                                            <Icon Name="IconName.ArrowRight" Size="IconSize.x5" Class="px-1"></Icon>
                                        </Button>
                                    </div>
                                </DropdownMenu>
                            </Dropdown>
                        </div>

                        <div class="pt-3 px-2">
                            <Button  Color="ButtonColor.Success" Outline Class="p-0 sort-btn"
                                     Active="filteringResult?.SortingMethod is SortingMethods.ByNameAsk"
                                     @onclick="()=>GetProducts(1, SortingMethods.ByNameAsk)">
                                 <Icon Name="IconName.SortAlphaDown" Size="IconSize.x4" Class="px-2"></Icon>
                             </Button>

                             <Button Color="ButtonColor.Success" Outline Class="p-0 sort-btn"
                                     Active="filteringResult?.SortingMethod is SortingMethods.ByNameDesk"
                                     @onclick="()=>GetProducts(1, SortingMethods.ByNameDesk)">
                                 <Icon Name="IconName.SortAlphaDownAlt" Size="IconSize.x4" Class="px-2"></Icon>
                             </Button>

                             <Button Color="ButtonColor.Success" Outline Class="p-0 sort-btn"
                                     Active="filteringResult?.SortingMethod is SortingMethods.ByCostAsk"
                                     @onclick="()=>GetProducts(1, SortingMethods.ByCostAsk)">
                                 <Icon Name="IconName.SortNumericDown" Size="IconSize.x4" Class="px-2"></Icon>
                             </Button>

                             <Button Color="ButtonColor.Success" Outline Class="p-0 sort-btn"
                                     Active="filteringResult?.SortingMethod is SortingMethods.ByCostDesk"
                                     @onclick="()=>GetProducts(1, SortingMethods.ByCostDesk)">
                                 <Icon Name="IconName.SortNumericDownAlt" Size="IconSize.x4" Class="px-2"></Icon>
                             </Button>
                         </div>

                         @if (filteringResult is not null)
                        {
                            <Pagination Class="m-0 pt-3 d-none d-xl-inline-flex"
                                        ActivePageNumber="(int)filteringResult.CurrentPage"
                                        TotalPages="(int)filteringResult.TotalPages"
                                        FirstLinkIcon="IconName.ChevronDoubleLeft"
                                        PreviousLinkIcon="IconName.ChevronLeft"
                                        NextLinkIcon="IconName.ChevronRight"
                                        LastLinkIcon="IconName.ChevronDoubleRight"
                                        PageChanged="OnPageChangedAsync">
                            </Pagination>
                        }
                    </div>
                </div>


                @if (filteringResult is null)
                {
                    <div class="mt-5">
                        <LoadingSpinner></LoadingSpinner>
                    </div>
                }
                else
                {


                    <div class="container-fluid p-0 mb-2">
                        @if (products is null || products.Count == 0)
                        {
                            <div class="mt-5">
                                <LoadingSpinner></LoadingSpinner>
                            </div>
                        }
                        else
                        {
                            <div class="row g-2">
                                @foreach (Product product in products)
                                {
                                    <ProductCardMini Product="product" />
                                }
                            </div>
                        }
                    </div>

                    <Pagination Class="mb-2 pt-1 d-xl-none"
                                ActivePageNumber="(int)filteringResult.CurrentPage"
                                TotalPages="(int)filteringResult.TotalPages"
                                Alignment="Alignment.Center"
                                FirstLinkIcon="IconName.ChevronDoubleLeft"
                                PreviousLinkIcon="IconName.ChevronLeft"
                                NextLinkIcon="IconName.ChevronRight"
                                LastLinkIcon="IconName.ChevronDoubleRight"
                                PageChanged="OnPageChangedAsync">
                    </Pagination>
                }
            </div>

        </div>
    }
</div>

@code {
    private List<ProductType>? productTypes = null;

    private FilteringResult<Product>? filteringResult = null;

    private List<Product>? products = null;

    private string? nameFilter = null;

    private ProductsFilter filter = new()
        {
            Name = null,
            ItemsOnPage = 12,
            PageNumber = 1,
            SortingMethod = ProductsFilter.SortingMethods.ByCostDesk,
            MinCost = null,
            MaxCost = null,
        };

    protected override async Task OnInitializedAsync()
    {
        await GetProductTypes();

        await GetProducts(1);
    }

    async Task OnPageChangedAsync(int newPageNumber)
    {
        await GetProducts(newPageNumber, filter.SortingMethod);
    }

    async Task GetProductTypes()
    {
        var result = await productTypeService.GetAllProductTypes();

        switch (result)
        {
            case SuccessResult<List<ProductType>> successResult:
                productTypes = successResult.Data;
                break;

            case ErrorResult<List<ProductType>> errorResult:
                productTypes = null;
                break;
        }
    }

    async Task GetProducts(int pageNumber, SortingMethods sortingMethod = SortingMethods.ByCostDesk)
    {
        filter.PageNumber = pageNumber;
        filter.SortingMethod = sortingMethod;
        filter.Name = nameFilter?.ToLower();

        products = null;

        var result = await productService.GetProductsByFilter(filter);

        switch (result)
        {
            case SuccessResult<FilteringResult<Product>> successResult:
                filteringResult = successResult.Data;
                products = successResult.Data.Results;
                break;

            case ErrorResult<FilteringResult<Product>> errorResult:
                filteringResult = null;
                break;
        }
    }

}
