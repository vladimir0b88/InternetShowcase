@page "/CreateProductImage/{productId:long}"
<PageTitle>Добавление изображения</PageTitle>

@inject IProductService productService
@inject IProductImageService productImageService
@inject NavigationManager navManager

<ErrorModal @ref="modal"></ErrorModal>

@if(product is not null)
{
    <EditForm Model="addImageDto" enctype="multipart/from-data" OnValidSubmit="Submit">

        <FluentValidationValidator/>
        <ValidationSummary/>

        <label class="col-form-label">Продукт</label>
        <div class="col-md-2">
            <input class="form-control" placeholder="@product.Name" disabled>
        </div>

        <label class="col-form-label">Изображение</label>
        <InputFile @bind-value="addImageDto.FormFile" class="form-control" accept="image/jpeg" OnChange="HandleFileUpload" />

        <div class="col-md-2 mt-2">
            <Button Type="ButtonType.Submit" Color="ButtonColor.Success">Добавить</Button>
        </div>

    </EditForm>

}

@code {
    [Parameter]
    public long ProductId { get; set; }

    private Product? product = null;
    private ProductImageAddDto addImageDto = new();

    private ErrorModal modal = new();

    protected override async Task OnInitializedAsync()
    {
        await GetProduct();
    }

    private async Task GetProduct()
    {
        var result = await productService.GetProductById(ProductId);

        switch (result)
        {
            case SuccessResult<Product> successResult:
                product = successResult.Data;
                addImageDto.ProductId = ProductId;
                break;

            case ErrorResult<Product> errorResult:
                await modal.ShowModal(errorResult);
                break;
        }
    }

    private async Task HandleFileUpload(InputFileChangeEventArgs e)
    {

    }

    private async Task Submit()
    {
        var result = await productImageService.AddImage(addImageDto);

        switch (result)
        {
            case SuccessResult:
                navManager.NavigateTo($"Product/{product!.Id}");
                break;
            case ErrorResult error:
                await modal.ShowModal(error);
                break;
        }
    }

}
