@page "/CreateTypeProperty/{typeId:long}"
<PageTitle>Создание свойства</PageTitle>

@attribute [Authorize(Roles = Roles.Administrator)]

@inject IProductTypeService productTypeService
@inject ITypePropertyService typePropertyService
@inject NavigationManager navManager

<ErrorModal @ref="modal"></ErrorModal>

@if(productType is null)
{
    <LoadingSpinner></LoadingSpinner>
}
else
{

    <h3>Создание свойства для <b>@productType.Name</b></h3>

    <EditForm Model="createDto" OnValidSubmit="Submit">

        <FluentValidationValidator />
        <ValidationSummary />

        <label class="col-form-label">Название свойства</label>
        <div class="col-md-2">
            <InputText @bind-Value="@createDto.Name" class="form-control"></InputText>
        </div>

        <div class="col-md-2 mt-2">
            <Button Type="ButtonType.Submit" Color="ButtonColor.Success">Создать</Button>
        </div>

    </EditForm>
}


@code {
    [Parameter]
    public long TypeId { get; set; }

    private ProductType? productType = null;

    private TypePropertyCreateDto createDto = new();

    private ErrorModal modal = new();

    protected override async Task OnInitializedAsync()
    {
        await GetProductType();
    }

    async Task GetProductType()
    {
        var result = await productTypeService.GetProductTypeById(TypeId);

        switch (result)
        {
            case SuccessResult<ProductType> successResult:
                productType = successResult.Data;
                createDto.TypeId = productType.Id;
                break;

            case ErrorResult<ProductType> errorResult:
                await modal.ShowModal(errorResult);
                break;
        }
    }

    async Task Submit()
    {
        var result = await typePropertyService.AddProperty(createDto);

        if (result is ErrorResult errorResult)
        {
            await modal.ShowModal(errorResult);
            return;
        }

        navManager.NavigateTo($"ProductType/{TypeId}");
    }
}
