@page "/ChangeTypeProperty/{productTypeId:long}/{propertyId:long}"

<PageTitle>Изменение свойства</PageTitle>

@attribute [Authorize(Roles = Roles.Administrator)]

@inject ITypePropertyService typePropertyService
@inject NavigationManager navManager

<ErrorModal @ref="modal"></ErrorModal>

<h3>Изменение свойства</h3>

<EditForm Model="updateDto" OnValidSubmit="Submit">

    <FluentValidationValidator />
    <ValidationSummary />

    <label class="col-form-label">Название свойства</label>
    <div class="col-md-2">
        <InputText @bind-Value="@updateDto.Name" class="form-control"></InputText>
    </div>

    <div class="col-md-2 mt-2">
        <Button Type="ButtonType.Submit" Color="ButtonColor.Success">Изменить</Button>
    </div>

</EditForm>

@code {
    [Parameter]
    public long ProductTypeId { get; set; }

    [Parameter]
    public long PropertyId { get; set; }

    private TypePropertyUpdateDto updateDto = new();

    private ErrorModal modal = new();

    async Task Submit()
    {
        var result = await typePropertyService.UpdateProperty(updateDto);

        if (result is ErrorResult errorResult)
        {
            await modal.ShowModal(errorResult);
            return;
        }

        navManager.NavigateTo($"ProductType/{ProductTypeId}");
    }

    protected override async Task OnInitializedAsync()
    {
        await GetUpdateDto();
    }

    async Task GetUpdateDto()
    {
        var result = await typePropertyService.GetPropertyById(PropertyId);

        switch (result)
        {
            case SuccessResult<TypeProperty> successResult:
                TypeProperty typeProperty = successResult.Data!;
                updateDto = new TypePropertyUpdateDto()
                    {
                        Id = typeProperty.Id,
                        Name = typeProperty.Name,
                    };
                break;

            case ErrorResult<TypeProperty> errorResult:
                await modal.ShowModal(errorResult);
                break;
        }
    }
}
