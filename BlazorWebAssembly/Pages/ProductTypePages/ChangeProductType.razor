@page "/ChangeProductType/{typeId:long}"
<PageTitle>Изменение типа товара</PageTitle>

@attribute [Authorize(Roles = Roles.Administrator)]

@inject IProductTypeService productTypeService
@inject NavigationManager navManager

<ErrorModal @ref="modal"></ErrorModal>

<h3>Изменение типа товара</h3>

@if (updateDto is null)
{
    <LoadingSpinner></LoadingSpinner>
}
else
{
    <EditForm Model="updateDto" OnValidSubmit="Submit">

        <FluentValidationValidator />
        <ValidationSummary />

        <div class="col-md-2">
            <label class="col-form-label">
                Название типа товара
                <InputText @bind-Value="@updateDto.Name" class="form-control"></InputText>
            </label>
        </div>

        <div class="col-md-2 mt-2">
            <Button Type="ButtonType.Submit" Color="ButtonColor.Success">Изменить</Button>
        </div>

    </EditForm>
}

@code {
    [Parameter]
    public long TypeId { get; set; }

    private ProductTypeUpdateDto? updateDto = null;

    private ErrorModal modal = new();

    async Task Submit()
    {
        var result = await productTypeService.UpdateProductType(updateDto!);

        if (result is ErrorResult errorResult)
        {
            await modal.ShowModal(errorResult);
            return;
        }

        navManager.NavigateTo("ProductTypes");
    }


    protected override async Task OnInitializedAsync()
    {
        await GetUpdateDto();
    }

    async Task GetUpdateDto()
    {
        var result = await productTypeService.GetProductTypeById(TypeId);

        switch (result)
        {
            case SuccessResult<ProductType> successResult:
                ProductType productType = successResult.Data!;
                updateDto = new ProductTypeUpdateDto()
                    {
                        Id = productType.Id,
                        Name = productType.Name,
                    };
                break;

            case ErrorResult<ProductType> errorResult:
                await modal.ShowModal(errorResult);
                break;
        }
    }
}
