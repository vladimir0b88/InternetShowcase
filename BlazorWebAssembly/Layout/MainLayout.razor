@inherits LayoutComponentBase
@inject AuthenticationStateProvider stateProvider

<div class="bb-page">

    <CascadingValue Value="this">

        <Sidebar @ref="sidebar"
                 IconName="IconName.Cart"
                 Title="Kaif House"
                 DataProvider="SidebarDataProvider" />


        <main>
            <div class="bb-top-row px-4 d-flex justify-content-end">
                <AuthorizeView>
                    <Authorized>
                        <span class="text-center m-3">@context.User.Identity!.Name</span>
                        <LogoutButton />
                    </Authorized>

                    <NotAuthorized>
                        <span class="m-3">Бро, авторизируйся</span>
                        <Button Color="ButtonColor.Success"
                                Type="ButtonType.Link"
                                To="Login">
                            Войти
                        </Button>
                    </NotAuthorized>
                </AuthorizeView>
            </div>

            <article class="content px-4">
                <div class="py-2">@Body</div>
            </article>
        </main>
    </CascadingValue>

</div>

@code {
    Sidebar? sidebar { get; set; }
    IEnumerable<NavItem>? navItems;


    private async Task<SidebarDataProviderResult> SidebarDataProvider(SidebarDataProviderRequest request)
    {
        if (navItems is null)
            navItems = await GetNavItems();

        return await Task.FromResult(request.ApplyTo(navItems));
    }

    public async Task RefreshSidebar()
    {
        await GetNavItems();

        await sidebar!.RefreshDataAsync();
    }

    private async Task<IEnumerable<NavItem>> GetNavItems()
    {
        navItems = new List<NavItem>{
            new NavItem { Id = "1",                    Href = "/",                    Text = "Каталог",        IconName = IconName.HouseDoorFill,  Match=NavLinkMatch.All},
            new NavItem { Id = "4",                    Href = "/ProductTypes",        Text = "Типы товаров"},
        };

        var authState = await stateProvider.GetAuthenticationStateAsync();

        if (!authState.User.Identity!.IsAuthenticated)
        {
            navItems = navItems.Concat(new List<NavItem>{
                    new NavItem { Id = "6",                    Href = "/Registration",        Text = "Регистрация"},
                    new NavItem { Id = "7",                    Href = "/Login",               Text = "Войти"},
                });
            return navItems;

        }

        var user = authState.User;

        if (user.IsInRole(Roles.Administrator))
            navItems = navItems.Concat(new List<NavItem>{
                    new NavItem { Id = "5",                                                   Text = "Таблицы"},
                    new NavItem { Id = "501",  ParentId = "5", Href = "/ProductsTable",       Text = "Продукты"},
                    new NavItem { Id = "502",  ParentId = "5", Href = "/ProductTypesTable",   Text = "Типы товаров"},
                    new NavItem { Id = "503",  ParentId = "5", Href = "/TypePropertiesTable", Text = "Свойства"},
                    new NavItem { Id = "504",  ParentId = "5", Href = "/PropertyValuesTable", Text = "Значения свойств"},
                    new NavItem { Id = "505",  ParentId = "5", Href = "/UsersTable",          Text = "Пользователи"},
                });


        return navItems;
    }

}