@inject IProductImageService productImageService


@if (Product is not null)
{
    @* <div class="col-12 col-sm-12 col-md-6 col-lg-4 border-end border-secondary-subtle border-2" style="height: 200px">
        @if (imageSrc is null)
        {

            <div class="d-flex align-items-center justify-content-center" style="height: 100%">
                <LoadingSpinner></LoadingSpinner>
            </div>
        }
        else
        {
            <img src="@imageSrc" style="height: 100%; width: 100%" class="" />
        }
    </div>
    <div class="col-12 col-sm-12 col-md-6 col-lg-8">
        <h3 class="px-2">@Product.Name</h3>
        <h5 class="px-2">@(Product.Type?.Name)</h5>
        <h4 class="px-2">@(Product.Cost)р.</h4>
    </div> *@


    <div class="col-6 col-sm-6 col-md-6 col-lg-4 col-xl-3">
        <div class="border border-2 border-secondary rounded">
            @if (imageSrc is null)
            {
                <div class="d-flex align-items-center justify-content-center"
                     style="height:200px">
                    <LoadingSpinner></LoadingSpinner>
                </div>
            }
            else
            {
                <img src="@imageSrc"
                     class="img-fluid rounded-top-1"
                     style="max-height:200px; height: 200px; width: 100%" />
            }
            <div class="d-flex flex-column justify-content-between"
                 style="min-height: 110px;">
                <h5 class="px-2 mt-2">@Product.Name</h5>
                <div>
                    <span class="fs-5 text-light d-inline-block m-2 px-2 bg-success rounded">
                        @(Product.Cost)р
                    </span>
                </div>
            </div>

        </div>
    </div>
}

@code {
    [Parameter]
    public Product? Product { get; set; }

    private string imageSrc = null!;


    protected override async Task OnInitializedAsync()
    {
        await GetProductImage();
    }

    private async Task GetProductImage()
    {
        var result = await productImageService.GetFirstImageByProductId(Product!.Id);

        switch (result)
        {
            case SuccessResult<ProductImage> successResult:
                imageSrc = successResult.Data.GetImage()!;
                break;

            case ErrorResult<ProductImage> errorResult:
                imageSrc = "NotFoundImage.jpg";
                break;
        }

    }
}
